# Current Plan and Status
[2024-05-04] Task: Modify banned word handling
- ✅ Create CheckAndCleanBanned method in TaskService
- ✅ Create CheckAndCleanBanned method in BannedPromptUtils
- ✅ Update ITaskService interface 
- ✅ Update controllers to use CheckAndCleanBanned
- Task completed: Modified the system to remove banned words instead of throwing exceptions

[2024-05-04] Task: Add AI review functionality for prompts
- ✅ Create IPromptReviewService interface
- ✅ Create GPTPromptReviewService implementation
- ✅ Add EnableAIReview config to ProxyProperties
- ✅ Register service in ServiceCollectionExtensions
- ✅ Implement AI review in Imagine, Shorten and Modal methods
- Task completed: Added AI content review for user prompts

[2024-05-06] Task: Improve AI review handling for URLs and parameters
- ✅ Update AI review in Imagine method to separate URLs and parameters
- ✅ Add AI review with URL and parameter separation to Shorten method
- ✅ Add AI review with URL and parameter separation to Modal method
- Task completed: Enhanced AI review to only process text content while preserving URLs and parameters

[2024-05-09] Task: Investigate NullReferenceException in TaskService.SubmitSeed
- Analyze stack trace and identify error origin in `TaskService.SubmitSeed` line 1138.
- Hypothesize cause: `TaskInfo` object or its critical properties (e.g., `Id`, `Nonce`, `BotType`) are null.
- Suggest debugging steps: Review code at error location, trace `TaskInfo` object creation and population from `TaskController.ImageSeed`.
- Status: Initial analysis complete, pending user code review.

[2024-05-10] Task: Investigate and fix DiscordInstance issues
- Analyze `RelaxAsync` BadRequest error.
  - Status: Attempted fix by correcting `botType` logic in `RelaxAsync`. (2024-05-10)
- Analyze `Account.CoreSize` concurrency update issue.
  - Status: Provided analysis on potential causes related to `Account.CoreSize` value refresh or `AsyncParallelLock` behavior. Awaiting user feedback and further data. (2024-05-10)
  - Added diagnostic logging for `MaxParallelism` and `Account.CoreSize` comparison. (2024-05-10)
- Overall Status: In progress

[2024-12-19] Task: Add AI review retry for banned prompt detected errors
- ✅ Add HasAIReviewRetried property to TaskInfo model
- ✅ Modify BotMessageListener to support AI review services dependency injection
- ✅ Implement TryAIReviewRetry method in BotMessageListener
- ✅ Add AI review retry logic for "Banned prompt detected" errors
- ✅ Create retry task with AI-reviewed prompt
- ✅ Update DiscordAccountHelper to pass AI review service to BotMessageListener
- Task completed: Added automatic AI review retry when encountering banned prompt errors

[2024-12-19] Task: Improve AI review retry flow with state synchronization
- ✅ Add AIReviewRetryTaskId property to TaskInfo model for tracking retry tasks
- ✅ Implement state synchronization mechanism between original and retry tasks
- ✅ Add MonitorRetryTaskProgress method for real-time progress tracking
- ✅ Ensure original task releases concurrent resources properly
- ✅ Add SubmitRetryTaskWithSync method for coordinated retry submission
- ✅ Implement timeout handling and error recovery for retry tasks
- Task completed: Enhanced AI review retry to maintain consistent user experience with proper resource management

[2024-12-19] Task: Simplify AI review retry flow by reusing original task ID
- ✅ Remove AIReviewRetryTaskId property from TaskInfo model
- ✅ Modify TryAIReviewRetry to directly update and resubmit original task
- ✅ Remove complex state synchronization logic (CreateRetryTask, SubmitRetryTaskWithSync, MonitorRetryTaskProgress)
- ✅ Add ResubmitTask method for direct task resubmission
- ✅ Ensure original task ID remains consistent for user queries
- ✅ Simplify error handling and resource management
- ✅ Add ITaskStoreService dependency injection to BotMessageListener
- ✅ Add task database saving in AI review retry process
- ✅ Fix nonce property setup for task resubmission
- Task completed: Simplified AI review retry flow to maintain original task ID while providing seamless user experience

[2024-12-19] Task: Fix account state management issues
- ✅ Fix InvalidSession handling to directly disable account instead of attempting reconnection
- ✅ Fix TryNewConnect lock competition issues by using account-specific lock names
- ✅ Ensure accounts are disabled even when lock acquisition fails to prevent long-term stuck states
- ✅ Add delayed fallback mechanism to force-disable accounts stuck in abnormal states for more than 10 minutes
- ✅ Improve NotifyWss to properly handle account enable state on successful connections
- Task completed: Fixed critical account state management issues that could cause accounts to remain in "enabled but disconnected" state for extended periods

# Learned Knowledge
## Technical Knowledge
[2024-05-04] When dealing with banned words in prompts, removing them instead of blocking the entire prompt can improve user experience while still maintaining content moderation.
[2024-05-04] AI review services can be integrated with translation services to provide additional content moderation capabilities.
[2024-05-06] When processing text with AI services, it's important to separate and preserve special elements like URLs and parameters to avoid modifying them incorrectly.
[2024-05-06] The same text extraction pattern can be reused across different processing functions (translation, banned word checking, AI review) to ensure consistent handling.

## Project Patterns
[2024-05-04] The Midjourney-proxy project uses both a TaskService class and a BannedPromptUtils static class for banned word handling, so both needed to be updated.
[2024-05-04] Services are registered in ServiceCollectionExtensions and can be injected into controllers.
[2024-05-04] Configuration options are added to ProxyProperties class and accessed through GlobalConfiguration.Setting.
[2024-05-06] Text processing in this project follows a pattern of: extracting parameters → extracting URLs → processing text content → recombining all parts.

## Error Corrections
[2024-05-04] Fixed the banned word handling to remove banned words instead of throwing exceptions.
[2024-05-06] Fixed AI review processing to avoid modifying URLs and parameters which could break functionality.

[2024-05-09] Investigated NullReferenceException in `TaskService.SubmitSeed`. Probable cause: The `TaskInfo` object passed to `SubmitSeed` is null, or one of its critical properties (e.g., `Id` for `jobId`, `Nonce`, or properties determining `BotType`) required for the seed operation is null. This can happen if the task retrieval in `TaskController.ImageSeed` fails or returns incomplete data. Recommended checking data retrieval logic for `TaskInfo` and ensuring all necessary fields are populated before or within `SubmitSeed` at line 1138 of `TaskService.cs`.

[2024-05-10] Corrected `RelaxAsync` in `DiscordInstance.cs` to use the correct `_paramsMap` key based on `botType`, addressing a BadRequest error. The logic for selecting `relax` vs `relaxniji` parameters was inverted.

# Project Guidelines
[2024-05-04] For content moderation:
- Prefer to clean content when possible instead of rejecting it entirely
- Maintain both service class and utility class implementations in sync
- Use AI services to enhance content moderation beyond simple word filtering 
[2024-05-06] For text processing:
- Always separate URLs and parameters before processing text content
- Process only the actual text content with AI/NLP services
- Preserve original formatting of specialized content (URLs, parameters)
- Apply consistent processing patterns across similar functions 

# System Updates
[2024-05-09] Initial system update. Added standard operational rules and preferences.

# Standard Rules and Preferences
## 1. Code Modification Preferences
- Prefer minimal code changes.
- Prioritize cautious and precise modifications.
- Maintain code functionality.
- Document all changes.

## 2. Programming Standards
- C Language: Adhere to MISRA-C-2012 standards.
- Other Languages: Apply appropriate, recognized standards.
- Document standard compliance.
- Note any necessary deviations from standards.

## 3. Language and Communication
- Respond in Chinese regardless of input language.
- Maintain English content within the .cursorrules file.
- Support bilingual interaction.
- Ensure accuracy of technical terminology.

## 4. Thinking Process
- Apply Chain-of-Thought (CoT) reasoning.
- Display dialectical analysis.
- Format thought processes within ```thinking``` code blocks.
- Include step-by-step reasoning.

## 5. Response Protocol
```markdown
# 分析步骤
1. 在代码块中显示思维过程
2. 提供详细推理
3. 用中文呈现结论
``` 
[2024-12-19] When implementing AI review retry for banned prompts, it's important to prevent infinite loops by marking tasks that have already been retried and only allowing one retry attempt per task.
[2024-12-19] The BotMessageListener processes Discord WebSocket messages in JSON format and handles embed error messages like "Banned prompt detected" differently from regular bot message handlers that process SocketMessage objects.
[2024-12-19] For AI review retry flow, maintaining user experience requires state synchronization between original and retry tasks. The original task should remain visible to users while the retry task executes in the background, with progress updates synchronized in real-time.
[2024-12-19] When implementing task retry mechanisms, proper resource management is crucial: original tasks must release concurrent resources (e.g., removing from running task list) to prevent account capacity issues, while ensuring seamless state transitions and error recovery.
[2024-12-19] For AI review retry systems, directly reusing the original task ID provides better user experience than creating new tasks. Users can continue querying with their original task ID and see the corrected results without needing to track multiple task IDs. This approach eliminates complex state synchronization requirements and reduces potential timeout issues. 