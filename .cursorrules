# Current Plan and Status
[2024-05-04] Task: Modify banned word handling
- ✅ Create CheckAndCleanBanned method in TaskService
- ✅ Create CheckAndCleanBanned method in BannedPromptUtils
- ✅ Update ITaskService interface 
- ✅ Update controllers to use CheckAndCleanBanned
- Task completed: Modified the system to remove banned words instead of throwing exceptions

[2024-05-04] Task: Add AI review functionality for prompts
- ✅ Create IPromptReviewService interface
- ✅ Create GPTPromptReviewService implementation
- ✅ Add EnableAIReview config to ProxyProperties
- ✅ Register service in ServiceCollectionExtensions
- ✅ Implement AI review in Imagine, Shorten and Modal methods
- Task completed: Added AI content review for user prompts

[2024-05-06] Task: Improve AI review handling for URLs and parameters
- ✅ Update AI review in Imagine method to separate URLs and parameters
- ✅ Add AI review with URL and parameter separation to Shorten method
- ✅ Add AI review with URL and parameter separation to Modal method
- Task completed: Enhanced AI review to only process text content while preserving URLs and parameters

[2024-05-09] Task: Investigate NullReferenceException in TaskService.SubmitSeed
- Analyze stack trace and identify error origin in `TaskService.SubmitSeed` line 1138.
- Hypothesize cause: `TaskInfo` object or its critical properties (e.g., `Id`, `Nonce`, `BotType`) are null.
- Suggest debugging steps: Review code at error location, trace `TaskInfo` object creation and population from `TaskController.ImageSeed`.
- Status: Initial analysis complete, pending user code review.

[2024-05-10] Task: Investigate and fix DiscordInstance issues
- Analyze `RelaxAsync` BadRequest error.
  - Status: Attempted fix by correcting `botType` logic in `RelaxAsync`. (2024-05-10)
- Analyze `Account.CoreSize` concurrency update issue.
  - Status: Provided analysis on potential causes related to `Account.CoreSize` value refresh or `AsyncParallelLock` behavior. Awaiting user feedback and further data. (2024-05-10)
  - Added diagnostic logging for `MaxParallelism` and `Account.CoreSize` comparison. (2024-05-10)
- Overall Status: In progress

[2024-12-19] Task: Add AI review retry for banned prompt detected errors
- ✅ Add HasAIReviewRetried property to TaskInfo model
- ✅ Modify BotMessageListener to support AI review services dependency injection
- ✅ Implement TryAIReviewRetry method in BotMessageListener
- ✅ Add AI review retry logic for "Banned prompt detected" errors
- ✅ Create retry task with AI-reviewed prompt
- ✅ Update DiscordAccountHelper to pass AI review service to BotMessageListener
- Task completed: Added automatic AI review retry when encountering banned prompt errors

[2024-12-19] Task: Improve AI review retry flow with state synchronization
- ✅ Add AIReviewRetryTaskId property to TaskInfo model for tracking retry tasks
- ✅ Implement state synchronization mechanism between original and retry tasks
- ✅ Add MonitorRetryTaskProgress method for real-time progress tracking
- ✅ Ensure original task releases concurrent resources properly
- ✅ Add SubmitRetryTaskWithSync method for coordinated retry submission
- ✅ Implement timeout handling and error recovery for retry tasks
- Task completed: Enhanced AI review retry to maintain consistent user experience with proper resource management

[2024-12-19] Task: Simplify AI review retry flow by reusing original task ID
- ✅ Remove AIReviewRetryTaskId property from TaskInfo model
- ✅ Modify TryAIReviewRetry to directly update and resubmit original task
- ✅ Remove complex state synchronization logic (CreateRetryTask, SubmitRetryTaskWithSync, MonitorRetryTaskProgress)
- ✅ Add ResubmitTask method for direct task resubmission
- ✅ Ensure original task ID remains consistent for user queries
- ✅ Simplify error handling and resource management
- ✅ Add ITaskStoreService dependency injection to BotMessageListener
- ✅ Add task database saving in AI review retry process
- ✅ Fix nonce property setup for task resubmission
- ✅ Improve failure reason handling in AI review retry process
Task completed: Simplified AI review retry flow to maintain original task ID while providing seamless user experience

[2024-12-19] Task: Fix account state management issues
- ✅ Fix InvalidSession handling to directly disable account instead of attempting reconnection
- ✅ Fix TryNewConnect lock competition issues by using account-specific lock names
- ✅ Ensure accounts are disabled even when lock acquisition fails to prevent long-term stuck states
- ✅ Add delayed fallback mechanism to force-disable accounts stuck in abnormal states for more than 10 minutes
- ✅ Improve NotifyWss to properly handle account enable state on successful connections
- Task completed: Fixed critical account state management issues that could cause accounts to remain in "enabled but disconnected" state for extended periods

[2024-12-19] Task: Improve AI review retry queue handling
- ✅ Fix ResubmitTask to properly handle IN_QUEUE return code as success
- ✅ Add queue information display when retry task needs to wait in queue
- ✅ Improve task description updates to show queue status clearly
- ✅ Add proper database saving after ResubmitTask updates task description
- Task completed: Enhanced AI review retry to properly handle queue situations, providing clear feedback when retry tasks need to wait

[2024-12-19] Task: Implement priority queue for upscale tasks
- ✅ Add IsPriority property to TaskInfo model to mark priority tasks
- ✅ Add priority queue (_priorityQueueTasks) alongside regular queue in DiscordInstance
- ✅ Modify SubmitTaskAsync to support priority queue submission
- ✅ Update Running method to process priority queue first before regular queue
- ✅ Update Action endpoint in SubmitController to mark upscale tasks as priority
- ✅ Update IsIdleQueue logic to consider both queues
- ✅ Ensure upscale tasks bypass queue size limits and get priority processing
- ✅ Update TaskService methods to use CanSubmitTask for priority tasks
- ✅ Update ExitTask method to remove tasks from both queues
- ✅ Fix Change method to mark UPSCALE tasks as priority
- ✅ Fix Action method to mark MJ::JOB::upsample_ tasks as priority
- ✅ Optimize Running method to check priority queue first in each iteration
Task completed: Implemented priority queue system where upscale tasks are processed with higher priority and can bypass normal queue size limits

[2024-12-19] Task: Add imageUrls field to TaskInfo for IMAGINE tasks
- ✅ Add ImageUrls property to TaskInfo model with List<ImgUrlInfo> type
- ✅ Create ImgUrlInfo class with Url property
- ✅ Add logic in TaskInfo.Success() method to generate 4 image URLs when action is IMAGINE and JobId exists
- ✅ Use URL format: https://cdn.midjourney.com/{jobId}/0_{index}.png
- ✅ Ensure imageUrls are saved to database and included in callbacks and queries automatically
Task completed: Added imageUrls field to TaskInfo for IMAGINE tasks to provide easy access to individual image URLs

[2024-12-21] Task: Fix AnimateModal BadRequest error in VIDEO operations
- ✅ Analyze BadRequest error with custom_id "MJ::AnimateModal::634d92ee-4a56-46d0-a296-d8f5f00d4bf8::1::high:0"
- ✅ Identify issue in TaskService.cs line 1041 where parts[2].Split('_')[1] fails when parts[2] is already "high" instead of "animate_high"
- ✅ Fix AnimateModal custom_id conversion logic to handle both original format (MJ::JOB::animate_high::...) and already converted format (MJ::AnimateModal::...)
- ✅ Add defensive check to prevent double conversion and handle cases where custom_id doesn't contain underscore
Task completed: Fixed AnimateModal BadRequest error by improving custom_id format detection and conversion logic

[2024-12-21] Task: Fix missing animate.json parameter file
- ✅ Analyze KeyNotFoundException for 'animate' key in _paramsMap dictionary
- ✅ Identify missing animate.json file in Resources/ApiParams directory
- ✅ Create animate.json parameter file based on zoom.json and remix.json format
- ✅ Add animate.json as EmbeddedResource in Midjourney.Infrastructure.csproj
- ✅ Ensure proper parameter mapping initialization for AnimateAsync method
Task completed: Fixed missing animate parameter configuration file causing runtime KeyNotFoundException

[2024-12-21] Task: Extend ImageUrls generation for tasks with upsample buttons
- ✅ Analyze existing ImageUrls logic in TaskInfo.Success() method
- ✅ Identify current logic only generates ImageUrls for IMAGINE type tasks
- ✅ Extend logic to also generate ImageUrls when buttons contain "MJ::JOB::upsample::" pattern
- ✅ Maintain existing IMAGINE type task functionality while adding new upsample button detection
Task completed: Enhanced ImageUrls generation to support tasks with upsample buttons, providing consistent image URL access across different task types

[2024-12-21] Task: Add VideoUrls support for VIDEO and VIDEO_EXTEND tasks
- ✅ Add VideoUrls property to TaskInfo model with List<VideoUrlInfo> type
- ✅ Create VideoUrlInfo class with Url and ImageUrl properties for video-image synchronization
- ✅ Add logic in TaskInfo.Success() method to generate video URLs for VIDEO and VIDEO_EXTEND tasks
- ✅ Use URL format: https://cdn.midjourney.com/video/{jobId}/0_{index}.mp4
- ✅ Implement synchronization between VideoUrls and ImageUrls (videoUrl=imageUrl)
- ✅ Ensure VideoUrls are saved to database and included in callbacks and queries automatically
Task completed: Added VideoUrls field to TaskInfo for VIDEO tasks to provide easy access to video URLs while maintaining image URL synchronization

# Learned Knowledge
## Technical Knowledge
[2024-05-04] When dealing with banned words in prompts, removing them instead of blocking the entire prompt can improve user experience while still maintaining content moderation.
[2024-05-04] AI review services can be integrated with translation services to provide additional content moderation capabilities.
[2024-05-06] When processing text with AI services, it's important to separate and preserve special elements like URLs and parameters to avoid modifying them incorrectly.
[2024-05-06] The same text extraction pattern can be reused across different processing functions (translation, banned word checking, AI review) to ensure consistent handling.

## Project Patterns
[2024-05-04] The Midjourney-proxy project uses both a TaskService class and a BannedPromptUtils static class for banned word handling, so both needed to be updated.
[2024-05-04] Services are registered in ServiceCollectionExtensions and can be injected into controllers.
[2024-05-04] Configuration options are added to ProxyProperties class and accessed through GlobalConfiguration.Setting.
[2024-05-06] Text processing in this project follows a pattern of: extracting parameters → extracting URLs → processing text content → recombining all parts.

## Error Corrections
[2024-05-04] Fixed the banned word handling to remove banned words instead of throwing exceptions.
[2024-05-06] Fixed AI review processing to avoid modifying URLs and parameters which could break functionality.

[2024-05-09] Investigated NullReferenceException in `TaskService.SubmitSeed`. Probable cause: The `TaskInfo` object passed to `SubmitSeed` is null, or one of its critical properties (e.g., `Id` for `jobId`, `Nonce`, or properties determining `BotType`) required for the seed operation is null. This can happen if the task retrieval in `TaskController.ImageSeed` fails or returns incomplete data. Recommended checking data retrieval logic for `TaskInfo` and ensuring all necessary fields are populated before or within `SubmitSeed` at line 1138 of `TaskService.cs`.

[2024-05-10] Corrected `RelaxAsync` in `DiscordInstance.cs` to use the correct `_paramsMap` key based on `botType`, addressing a BadRequest error. The logic for selecting `relax` vs `relaxniji` parameters was inverted.

[2024-12-21] Fixed AnimateModal BadRequest error in TaskService.cs. The custom_id conversion logic assumed input format was always "MJ::JOB::animate_high::..." but sometimes received already converted format "MJ::AnimateModal::...". Added format detection to prevent double conversion and handle cases where action type doesn't contain underscore. This prevents "parts[2].Split('_')[1]" from throwing IndexOutOfRangeException when parts[2] is already "high" instead of "animate_high".

[2024-12-21] Fixed KeyNotFoundException for missing 'animate' parameter in DiscordInstance.cs. The issue occurred because animate.json parameter file was missing from Resources/ApiParams directory and not included as EmbeddedResource in the project file. Created animate.json with proper modal structure based on existing zoom.json and remix.json formats, and added it to Midjourney.Infrastructure.csproj as EmbeddedResource. This ensures AnimateAsync method can properly access Discord API parameters for video animation operations.

# Project Guidelines
[2024-05-04] For content moderation:
- Prefer to clean content when possible instead of rejecting it entirely
- Maintain both service class and utility class implementations in sync
- Use AI services to enhance content moderation beyond simple word filtering 
[2024-05-06] For text processing:
- Always separate URLs and parameters before processing text content
- Process only the actual text content with AI/NLP services
- Preserve original formatting of specialized content (URLs, parameters)
- Apply consistent processing patterns across similar functions 

# System Updates
[2024-05-09] Initial system update. Added standard operational rules and preferences.

# Standard Rules and Preferences
## 1. Code Modification Preferences
- Prefer minimal code changes.
- Prioritize cautious and precise modifications.
- Maintain code functionality.
- Document all changes.

## 2. Programming Standards
- C Language: Adhere to MISRA-C-2012 standards.
- Other Languages: Apply appropriate, recognized standards.
- Document standard compliance.
- Note any necessary deviations from standards.

## 3. Language and Communication
- Respond in Chinese regardless of input language.
- Maintain English content within the .cursorrules file.
- Support bilingual interaction.
- Ensure accuracy of technical terminology.

## 4. Thinking Process
- Apply Chain-of-Thought (CoT) reasoning.
- Display dialectical analysis.
- Format thought processes within ```thinking``` code blocks.
- Include step-by-step reasoning.

## 5. Response Protocol
```markdown
# 分析步骤
1. 在代码块中显示思维过程
2. 提供详细推理
3. 用中文呈现结论
``` 
[2024-12-19] When implementing AI review retry for banned prompts, it's important to prevent infinite loops by marking tasks that have already been retried and only allowing one retry attempt per task.
[2024-12-19] The BotMessageListener processes Discord WebSocket messages in JSON format and handles embed error messages like "Banned prompt detected" differently from regular bot message handlers that process SocketMessage objects.
[2024-12-19] For AI review retry flow, maintaining user experience requires state synchronization between original and retry tasks. The original task should remain visible to users while the retry task executes in the background, with progress updates synchronized in real-time.
[2024-12-19] When implementing task retry mechanisms, proper resource management is crucial: original tasks must release concurrent resources (e.g., removing from running task list) to prevent account capacity issues, while ensuring seamless state transitions and error recovery.
[2024-12-19] For AI review retry systems, directly reusing the original task ID provides better user experience than creating new tasks. Users can continue querying with their original task ID and see the corrected results without needing to track multiple task IDs. This approach eliminates complex state synchronization requirements and reduces potential timeout issues.
[2024-12-19] In AI review retry processes, failure reasons must be cleared immediately when retry begins to prevent users from seeing confusing old error messages. The failure reason should be set to null at the start of retry, and only updated with new, relevant failure information if the retry itself fails.
[2024-12-19] When implementing AI review retry functionality, it's crucial to handle queue scenarios properly. The IN_QUEUE return code should be treated as a successful submission, not a failure. Users should see clear feedback about queue status (e.g., "AI审核重试成功，排队中，前面还有X个任务") to understand their task is progressing normally through the system.
[2024-12-19] When implementing priority queues for task processing, it's important to ensure all entry points for priority tasks are properly marked. Multiple controller methods (Change, Action) may handle the same task type (UPSCALE), so priority flags must be set consistently across all paths.
[2024-12-19] Priority queue processing logic should check priority tasks first in each iteration rather than exhaustively processing all priority tasks before moving to regular tasks. This prevents resource starvation and ensures fair processing when both priority and regular tasks compete for limited resources.
[2024-12-19] Upscale-related tasks come in different forms: MJ::JOB::upsample:: (basic upscale) and MJ::JOB::upsample_ (high-quality upscale variants like 2x subtle/creative). All upscale variations should be treated as priority tasks for consistent user experience. 

[2024-12-19] For TaskInfo model extensions, new fields should use JsonMap attribute for complex objects and be initialized with default values in the constructor or property declaration to ensure proper serialization and database storage.

[2024-12-21] When processing custom_id transformations for Discord interactions, always validate the input format before attempting string manipulations like Split(). Different entry points may provide custom_ids in various stages of transformation (original vs converted), so defensive coding with format detection prevents runtime errors. For VIDEO/animate operations, custom_ids can be in format "MJ::JOB::animate_high::..." (original) or "MJ::AnimateModal::..." (already converted).

[2024-12-21] For Discord API parameter management: All API parameter files in Resources/ApiParams must be included as EmbeddedResource in the .csproj file to be loaded into the _paramsMap dictionary at runtime. Missing parameter files will cause KeyNotFoundException when the corresponding Discord operations are invoked. Parameter files follow a consistent JSON structure with type 5 for modal operations, containing application_id, channel_id, guild_id, data section with custom_id and components, session_id, and nonce placeholders.

[2024-12-21] For TaskInfo ImageUrls generation: The ImageUrls property should be populated not only for IMAGINE type tasks but also for any task whose buttons contain "MJ::JOB::upsample::" patterns. This ensures consistent image URL access across different task types that produce image results. The logic should check both the task Action type and the buttons' CustomId values to determine when to generate the image URL array.

[2024-12-21] For TaskInfo VideoUrls generation: VIDEO and VIDEO_EXTEND task types should generate both VideoUrls and ImageUrls simultaneously. VideoUrls use the format https://cdn.midjourney.com/video/{JobId}/0_{i}.mp4 while maintaining image URL synchronization for preview purposes. VideoUrlInfo structure is identical to ImgUrlInfo with only a Url property. VideoUrls and ImageUrls correspond through the same index - VideoUrls[i].Url corresponds to ImageUrls[i].Url for the same content at different formats. 